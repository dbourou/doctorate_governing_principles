
%( Here are the specifications of the input spaces 
and generic spaces needed to compute blend1.
The blend without any generalisation corresponds
to the colimit of the span I <- G -> J 
and with generalisation, to the colimit of the span
I_0 <- G_0 -> J_0. The arrows are implemented as views
in this code )%

%( The span V models a blend between I and J, without any generalization,
which creates outer-space relations between the orientation predicates
'leftBack', 'rightBack', and 'back' and the schematic predicate 'more',
between the Point sort of the geometry and the Grade sort of the SCALE,
and between the constants denoting 8 points,
and the constants gr_1 to gr_4 denoting 4 grades on the scale
(points on the same horizontal parallel have outer-space relations
to the same level) )%

%( The generalized span has I_0 which generalizes from the geometry
all constants of type Line and the Line sort,
as well as the predicates leftPP, rightPP (defined on points) and any
predicates defined on type Line (all axioms that contain them are removed too).
This is because Lines and left-right orientation of points do not play a role in our sense-making of the Hasse diagram with the Scale schema.
The generic space is the same as G. )%




spec I_0 =
	sorts Point
	%( here the sorts needed are a Point and a Line )%

ops
	
	c_1, c_2, c_3, c_4,
	c_5, c_6, c_7, c_8: Point
	%( instantiate eight points )%

preds
	%( the "intersect" predicate is defined on pairs of Points, pairs of Lines, or a Point and a Line )%
	intersectPP: Point * Point

	%( these predicates are defined on pairs of Lines, pairs of Points, 
	or a Line and a Point, and they express relative position )%

	__backPP__,__frontPP__,__leftBackPP__,__leftFrontPP__,
	__rightBackPP__,__rightFrontPP__  : Point * Point


%axioms%
	%( describe the precise relative positions of all pairs of instantiated Points )%
	.c_1 rightBackPP c_2 .c_2 leftFrontPP c_1 
	.c_1 rightBackPP c_5 .c_5 leftFrontPP c_1
	.c_5 leftBackPP c_8 .c_8 rightFrontPP c_5 

	.c_1 backPP c_8 .c_8 frontPP c_1
	.c_2 backPP c_5 .c_5 frontPP c_2


	%( describe the precise relative positions of all pairs of instantiated Points )%
	.c_3 rightBackPP c_5 .c_5 leftFrontPP c_3 
	.c_4 rightBackPP c_5 .c_5 leftFrontPP c_4 
	.c_4 rightBackPP c_6 .c_6 leftFrontPP c_4 
	.c_4 rightBackPP c_8 .c_8 leftFrontPP c_4 
	.c_7 rightBackPP c_8 .c_8 leftFrontPP c_7 

	.c_1 leftBackPP c_4 .c_4 rightFrontPP c_1 
	.c_1 leftBackPP c_7 .c_7 rightFrontPP c_1 
	.c_2 leftBackPP c_6 .c_6 rightFrontPP c_2 
	.c_2 leftBackPP c_7 .c_7 rightFrontPP c_2 
	.c_2 leftBackPP c_8 .c_8 rightFrontPP c_2 
	.c_3 leftBackPP c_7 .c_7 rightFrontPP c_3 

	.c_1 backPP c_3 .c_3 frontPP c_1 
	.c_1 backPP c_6 .c_6 frontPP c_1
	.c_3 backPP c_6 .c_6 frontPP c_3
	.c_3 backPP c_8 .c_8 frontPP c_3
	.c_4 backPP c_7 .c_7 frontPP c_4
	.c_6 backPP c_8 .c_8 frontPP c_6 


end



spec I = 

sorts Point, Line

ops
	c_1, c_2, c_3, c_4,
	c_5, c_6, c_7, c_8: Point
	%( instantiate eight points )%

	r_21, r_52, r_85: Line
	%( instantiate twelve Lines )%
	r_31, r_41, r_53, r_62, r_64, 
	r_73, r_74, r_86, r_87: Line
	%( instantiate twelve Lines )%

preds
	%( the "intersect" predicate is defined on pairs of Points, pairs of Lines, or a Point and a Line )%
	intersectLL: Line * Line

	%( these predicates are defined on pairs of Lines, pairs of Points, 
	or a Line and a Point, and they express relative position )%

	__backLL__,__frontLL__,__leftLL__,__leftBackLL__,__leftFrontLL__,
	__rightLL__,__rightBackLL__,__rightFrontLL__  : Line * Line

	intersectLP: Line * Point
	intersectPP: Point * Point

	%( these predicates are defined on pairs of Lines, pairs of Points, 
	or a Line and a Point, and they express relative position )%

	__backPP__,__frontPP__,__leftPP__,__leftBackPP__,__leftFrontPP__,
	__rightPP__,__rightBackPP__,__rightFrontPP__,__rightPP__,__leftPP__  : Point * Point

	__backLP__,__frontLP__,__leftLP__,__leftBackLP__,__leftFrontLP__,
	__rightLP__,__rightBackLP__,__rightFrontLP__,__rightLP__,__leftLP__ : Line * Point


%axioms%


	%( describe the precise relative positions of all pairs of instantiated Points )%
	.c_1 rightBackPP c_2 .c_2 leftFrontPP c_1 
	.c_1 rightBackPP c_5 .c_5 leftFrontPP c_1
	.c_5 leftBackPP c_8 .c_8 rightFrontPP c_5 

	.c_1 backPP c_8 .c_8 frontPP c_1
	.c_2 backPP c_5 .c_5 frontPP c_2

	%( describe the precise topological relation - here, intersection - 
	of Lines with Points and lines with lines )%
	.intersectLP(r_21,c_1) .intersectLP(r_21,c_2) 
	.intersectLP(r_52,c_2) .intersectLP(r_52,c_5) 
	.intersectLP(r_85,c_5) .intersectLP(r_85,c_8) 

	%( describe the precise relative positions of all pairs of instantiated Points )%
	.c_3 rightBackPP c_5 .c_5 leftFrontPP c_3 
	.c_4 rightBackPP c_5 .c_5 leftFrontPP c_4 
	.c_4 rightBackPP c_6 .c_6 leftFrontPP c_4 
	.c_4 rightBackPP c_8 .c_8 leftFrontPP c_4 
	.c_7 rightBackPP c_8 .c_8 leftFrontPP c_7 

	.c_1 leftBackPP c_4 .c_4 rightFrontPP c_1 
	.c_1 leftBackPP c_7 .c_7 rightFrontPP c_1 
	.c_2 leftBackPP c_6 .c_6 rightFrontPP c_2 
	.c_2 leftBackPP c_7 .c_7 rightFrontPP c_2 
	.c_2 leftBackPP c_8 .c_8 rightFrontPP c_2 
	.c_3 leftBackPP c_7 .c_7 rightFrontPP c_3 

	.c_1 backPP c_3 .c_3 frontPP c_1 
	.c_1 backPP c_6 .c_6 frontPP c_1 .c_2 leftPP c_3 .c_3 rightPP c_2 
	.c_2 leftPP c_4 .c_4 rightPP c_2 
	.c_3 leftPP c_4 .c_4 rightPP c_3 
	.c_3 backPP c_6 .c_6 frontPP c_3 .c_5 leftPP c_6 .c_6 rightPP c_5 
	.c_3 backPP c_8 .c_8 frontPP c_3 .c_5 leftPP c_7 .c_7 rightPP c_5 
	.c_4 backPP c_7 .c_7 frontPP c_4 .c_6 leftPP c_7 .c_7 rightPP c_6 
	.c_6 backPP c_8 .c_8 frontPP c_6 

	%( describe the precise topological relation - here, intersection - 
	of Lines with Points and lines with lines )%
	.intersectLP(r_31,c_1) .intersectLP(r_31,c_3)
	.intersectLP(r_41,c_1) .intersectLP(r_41,c_4)
	.intersectLP(r_53,c_3) .intersectLP(r_53,c_5)
	.intersectLP(r_62,c_2) .intersectLP(r_62,c_6) 
	.intersectLP(r_64,c_4) .intersectLP(r_64,c_6)
	.intersectLP(r_73,c_3) .intersectLP(r_73,c_7)
	.intersectLP(r_74,c_4) .intersectLP(r_74,c_7) 
	.intersectLP(r_86,c_6) .intersectLP(r_86,c_8)
	.intersectLP(r_87,c_7) .intersectLP(r_87,c_8) 

	.intersectLL(r_53,r_62) .intersectLL(r_64,r_73)

end




spec J =

sorts 
	Grade, ScaleSchema, Scale
	%( ScaleSchema sort corresponds to the entire configuration defined 
	in the specification, i.e., the image schema gestalt )%

op   scale : ScaleSchema -> Scale

	scsc: ScaleSchema

	a_scale: Scale
	%( instantiate a ScaleSchema and a Scale )%
	
	gr_1, gr_2, gr_3, gr_4: Grade
	%( instantiate four Grades )%

preds
	
	inScale: Grade * Scale
	%( predicate specifying that a Grade is "in" a Scale )%

	more, less: Grade * Grade
	%( predicates specifying that a Grade is "more" or less" than 
	another one on the ScaleSchema )%


%axioms% 
	
	forall s: ScaleSchema; x,y,z: Grade

    	. forall c:Scale
    	%( scales are always part of a unique SCALARITY schema )%
    	. exists! sc:ScaleSchema . scale(sc) = c

    	%( distinct grades of a scale are comparable )%
    	. inScale(x,scale(s)) /\ inScale(y,scale(s)) /\ not x = y
    	=> more(x,y) \/ more(y,x)

    	%( two comparable grades are on the same scale of a SCALARITY schema )%
    	. more(x,y) => exists! sc:ScaleSchema
    	. inScale(x,scale(sc)) /\ inScale(y,scale(sc))
     
    	%( less is the inverse of more )%
    	. less(x,y) <=> more(y,x)

		%( ''more'' has the properties of a total order )%

    	. not more(x,x)				%( irreflexive )%
    	. more(x,y) /\ more(y,z) => more(x,z)	%( transitive )%
		. more(x,y) => not more(y,x) %( asymmetry )%


	.scale(scsc)=a_scale
	.inScale(gr_1,a_scale) .inScale(gr_2,a_scale)
	.inScale(gr_3,a_scale) .inScale(gr_4,a_scale)
	%( declare that the four instantiated Grades are 
	in the instantiated ScaleSchema )%

	.more(gr_4,gr_3) .more(gr_3,gr_2) .more(gr_2,gr_1)
	%( declare which Grade is "more" than which )%

end 




%(GENERIC SPACES)%


spec G_0 =

sort Degree

ops
	deg_1, deg_2a, deg_2b, deg_2c,
	deg_3a, deg_3b, deg_3c, deg_4: Degree

pred
	higher_deg1, higher_deg2, higher_deg3: Degree * Degree


view G0J : G_0 to J = 
	Degree |-> Grade, deg_1 |-> gr_1, 
	deg_3a |-> gr_2, deg_3b |-> gr_2, deg_3c |-> gr_2, 
	deg_2a |-> gr_3, deg_2b |-> gr_3, deg_2c |-> gr_3, 
	deg_4 |-> gr_4,
	higher_deg1 |-> more, higher_deg2 |-> more, higher_deg3|-> more

view G0I : G_0 to I_0 =
	Degree |-> Point, 
	deg_4 |-> c_1, 
	deg_3a |-> c_2, deg_3b |-> c_3, deg_3c |-> c_4, 
	deg_2a |-> c_5, deg_2b |-> c_6, deg_2c |-> c_7, 
	deg_1 |-> c_8,
	higher_deg1 |-> __backPP__, higher_deg2 |-> __leftBackPP__, 
	higher_deg3|-> __rightBackPP__



%( spec BLEND_V0 = combine G0J, G0I )%


spec BLEND_V0 =
sorts Degree, Scale, ScaleSchema
op a_scale : Scale
op gr_1 : Degree
op gr_2 : Degree
op gr_3 : Degree
op gr_4 : Degree
op scale : ScaleSchema -> Scale
op scsc : ScaleSchema
pred __frontPP__ : Degree * Degree
pred __leftFrontPP__ : Degree * Degree
pred __rightFrontPP__ : Degree * Degree
pred inScale : Degree * Scale
pred intersectPP : Degree * Degree
pred less : Degree * Degree
pred more : Degree * Degree
forall c : Scale . exists! sc : ScaleSchema . scale(sc) = c
                       %(scales are always part of a unique SCALARITY schema)%
forall s : ScaleSchema; x, y : Degree
. inScale(x, scale(s)) /\ inScale(y, scale(s)) /\ not x = y
     => more(x, y) \/ more(y, x)                                                       %(Ax2)%
forall x, y : Degree
. more(x, y)
     => exists! sc : ScaleSchema
                 . inScale(x, scale(sc)) /\ inScale(y, scale(sc))       %(Ax3)%
forall x, y : Degree . less(x, y) <=> more(y, x) %(Ax4)%
forall x : Degree . not more(x, x) %(irreflexive)%
forall x, y, z : Degree . more(x, y) /\ more(y, z) => more(x, z)
                                                                                                         %(transitive)%
forall x, y : Degree . more(x, y) => not more(y, x)
                                                                                                           %(asymmetry)%
. scale(scsc) = a_scale %(Ax8)%
. inScale(gr_1, a_scale) %(Ax9)%
. inScale(gr_2, a_scale) %(Ax10)%
. inScale(gr_3, a_scale) %(Ax11)%
. inScale(gr_4, a_scale)
%(declare that the four instantiated Grades are in the instantiated ScaleSchema)%
. more(gr_4, gr_3) %(Ax13)%
. more(gr_3, gr_2) %(Ax14)%
. more(gr_4, gr_2) %(Ax1)%
. gr_2 leftFrontPP gr_4 %(Ax2_20)%
. gr_3 leftFrontPP gr_4 %(Ax4_22)%
. gr_1 rightFrontPP gr_3 %(Ax6)%
. more(gr_4, gr_1) %(Ax7)%
. gr_1 frontPP gr_4 %(Ax8_23)%
. gr_3 frontPP gr_2 %(Ax10_16)%
. more(gr_2, gr_3) %(Ax11_17)%
. gr_3 leftFrontPP gr_2 %(Ax12)%
. more(gr_2, gr_1) %(Ax17)%
. gr_1 leftFrontPP gr_2 %(Ax18)%
. more(gr_3, gr_1) %(Ax19)%
. gr_1 leftFrontPP gr_3 %(Ax20)%
. gr_2 rightFrontPP gr_4 %(Ax22)%
. gr_3 rightFrontPP gr_4 %(Ax24)%
. gr_3 rightFrontPP gr_2 %(Ax26)%
. gr_1 rightFrontPP gr_2 %(Ax30)%
. gr_2 frontPP gr_4 %(Ax34)%
. gr_3 frontPP gr_4 %(Ax36)%
. gr_1 frontPP gr_2 %(Ax40)%
. gr_1 frontPP gr_3 %(Ax44)%



spec G =

sort Degree

ops
	deg_1, deg_2a, deg_2b, deg_2c,
	deg_3a, deg_3b, deg_3c, deg_4: Degree

pred
	higher_deg1, higher_deg2, higher_deg3: Degree * Degree


view GJ : G to J = 
	Degree |-> Grade, deg_1 |-> gr_1, 
	deg_3a |-> gr_2, deg_3b |-> gr_2, deg_3c |-> gr_2, 
	deg_2a |-> gr_3, deg_2b |-> gr_3, deg_2c |-> gr_3, 
	deg_4 |-> gr_4,
	higher_deg1 |-> more, higher_deg2 |-> more, higher_deg3|-> more

view GI : G to I =
	Degree |-> Point, 
	deg_4 |-> c_1, 
	deg_3a |-> c_2, deg_3b |-> c_3, deg_3c |-> c_4, 
	deg_2a |-> c_5, deg_2b |-> c_6, deg_2c |-> c_7, 
	deg_1 |-> c_8,
	higher_deg1 |-> __backPP__, higher_deg2 |-> __leftBackPP__, 
	higher_deg3|-> __rightBackPP__


%( spec BLEND_V = combine GJ, GI )%


spec BLEND_V =
sorts Degree, Line, Scale, ScaleSchema
op a_scale : Scale
op gr_1 : Degree
op gr_2 : Degree
op gr_3 : Degree
op gr_4 : Degree
op r_21 : Line
op r_31 : Line
op r_41 : Line
op r_52 : Line
op r_53 : Line
op r_62 : Line
op r_64 : Line
op r_73 : Line
op r_74 : Line
op r_85 : Line
op r_86 : Line
op r_87 : Line
op scale : ScaleSchema -> Scale
op scsc : ScaleSchema
pred __backLL__ : Line * Line
pred __backLP__ : Line * Degree
pred __frontLL__ : Line * Line
pred __frontLP__ : Line * Degree
pred __frontPP__ : Degree * Degree
pred __leftBackLL__ : Line * Line
pred __leftBackLP__ : Line * Degree
pred __leftFrontLL__ : Line * Line
pred __leftFrontLP__ : Line * Degree
pred __leftFrontPP__ : Degree * Degree
pred __leftLL__ : Line * Line
pred __leftLP__ : Line * Degree
pred __leftPP__ : Degree * Degree
pred __rightBackLL__ : Line * Line
pred __rightBackLP__ : Line * Degree
pred __rightFrontLL__ : Line * Line
pred __rightFrontLP__ : Line * Degree
pred __rightFrontPP__ : Degree * Degree
pred __rightLL__ : Line * Line
pred __rightLP__ : Line * Degree
pred __rightPP__ : Degree * Degree
pred inScale : Degree * Scale
pred intersectLL : Line * Line
pred intersectLP : Line * Degree
pred intersectPP : Degree * Degree
pred less : Degree * Degree
pred more : Degree * Degree
forall c : Scale . exists! sc : ScaleSchema . scale(sc) = c
                       %(scales are always part of a unique SCALARITY schema)%
forall s : ScaleSchema; x, y : Degree
. inScale(x, scale(s)) /\ inScale(y, scale(s)) /\ not x = y
     => more(x, y) \/ more(y, x)                                                       %(Ax2)%
forall x, y : Degree
. more(x, y)
     => exists! sc : ScaleSchema
                 . inScale(x, scale(sc)) /\ inScale(y, scale(sc))       %(Ax3)%
forall x, y : Degree . less(x, y) <=> more(y, x) %(Ax4)%
forall x : Degree . not more(x, x) %(irreflexive)%
forall x, y, z : Degree . more(x, y) /\ more(y, z) => more(x, z)
                                                                                                         %(transitive)%
forall x, y : Degree . more(x, y) => not more(y, x)
                                                                                                           %(asymmetry)%
. scale(scsc) = a_scale %(Ax8)%
. inScale(gr_1, a_scale) %(Ax9)%
. inScale(gr_2, a_scale) %(Ax10)%
. inScale(gr_3, a_scale) %(Ax11)%
. inScale(gr_4, a_scale)
%(declare that the four instantiated Grades are in the instantiated ScaleSchema)%
. more(gr_4, gr_3) %(Ax13)%
. more(gr_3, gr_2) %(Ax14)%
. more(gr_4, gr_2) %(Ax1)%
. gr_2 leftFrontPP gr_4 %(Ax2_20)%
. gr_3 leftFrontPP gr_4 %(Ax4_22)%
. gr_1 rightFrontPP gr_3 %(Ax6)%
. more(gr_4, gr_1) %(Ax7)%
. gr_1 frontPP gr_4 %(Ax8_23)%
. gr_3 frontPP gr_2 %(Ax10_16)%
. intersectLP(r_21, gr_4) %(Ax11_17)%
. intersectLP(r_21, gr_2) %(Ax12)%
. intersectLP(r_52, gr_2) %(Ax13_18)%
. intersectLP(r_52, gr_3) %(Ax14_19)%
. intersectLP(r_85, gr_3) %(Ax15)%
. intersectLP(r_85, gr_1) %(Ax16)%
. more(gr_2, gr_3) %(Ax17)%
. gr_3 leftFrontPP gr_2 %(Ax18)%
. more(gr_2, gr_1) %(Ax23)%
. gr_1 leftFrontPP gr_2 %(Ax24)%
. more(gr_3, gr_1) %(Ax25)%
. gr_1 leftFrontPP gr_3 %(Ax26)%
. gr_2 rightFrontPP gr_4 %(Ax28)%
. gr_3 rightFrontPP gr_4 %(Ax30)%
. gr_3 rightFrontPP gr_2 %(Ax32)%
. gr_1 rightFrontPP gr_2 %(Ax36)%
. gr_2 frontPP gr_4 %(Ax40)%
. gr_3 frontPP gr_4 %(Ax42)%
. gr_2 leftPP gr_2 %(Ax43)%
. gr_2 rightPP gr_2 %(Ax44)%
. gr_3 leftPP gr_3 %(Ax51)%
. gr_3 rightPP gr_3 %(Ax52)%
. gr_1 frontPP gr_2 %(Ax54)%
. gr_1 frontPP gr_3 %(Ax62)%
. intersectLP(r_31, gr_4) %(Ax63)%
. intersectLP(r_31, gr_2) %(Ax64)%
. intersectLP(r_41, gr_4) %(Ax65)%
. intersectLP(r_41, gr_2) %(Ax66)%
. intersectLP(r_53, gr_2) %(Ax67)%
. intersectLP(r_53, gr_3) %(Ax68)%
. intersectLP(r_62, gr_2) %(Ax69)%
. intersectLP(r_62, gr_3) %(Ax70)%
. intersectLP(r_64, gr_2) %(Ax71)%
. intersectLP(r_64, gr_3) %(Ax72)%
. intersectLP(r_73, gr_2) %(Ax73)%
. intersectLP(r_73, gr_3) %(Ax74)%
. intersectLP(r_74, gr_2) %(Ax75)%
. intersectLP(r_74, gr_3) %(Ax76)%
. intersectLP(r_86, gr_3) %(Ax77)%
. intersectLP(r_86, gr_1) %(Ax78)%
. intersectLP(r_87, gr_3) %(Ax79)%
. intersectLP(r_87, gr_1) %(Ax80)%
. intersectLL(r_53, r_62) %(Ax81)%
. intersectLL(r_64, r_73) %(Ax82)%
